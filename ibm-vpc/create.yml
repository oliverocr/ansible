---
- name: Create IBM Cloud VPC
  hosts: localhost
  collections:
   - ibm.cloudcollection
  tasks:
    - name: Fetch the variables from var file
      include_vars:
        file: vars.yml

    - name: Check resource group Exists
      ibm_resource_group_info:
        name: "{{ resource_group_name }}"
      register: resource_group_output

    - name: Save existing resource group info as fact
      set_fact:
        cacheable: True
        resource_group: "{{ resource_group_output.resource }}"
      when: resource_group_output.resource.id is defined

    - name: Configure VPC
      ibm_is_vpc:
        name: "{{ vpc_name }}"
        state: available
        address_prefix_management: manual
        resource_group: "{{ resource_group_output.resource.id }}"
        id: "{{ vpc.resource.id | default(omit) }}"
      register: vpc

    - name: Configure Address Prefix
      ibm_is_vpc_address_prefix:
        name: "{{ prefix_name }}"
        state: available
        vpc: "{{ vpc.resource.id }}"
        cidr: "{{ address_prefix }}"
        zone: "{{ zone }}"
        is_default: true
      register: address_prefix_output

    - name: Checking for existing VPC Subnet A
      ibm_is_subnet_info:
        name: "{{ subnet_name_a }}"
      failed_when:
        - subnet.rc != 0
        - '"No subnet found" not in subnet.stderr'
      register: subnet

    - name: Configure VPC Subnet A
      ibm_is_subnet:
        name: "{{ subnet_name_a }}"
        state: available
        id: "{{ subnet.id | default(omit) }}"
        vpc: "{{ vpc.resource.id }}"
        resource_group: "{{ resource_group_output.resource.id }}"
        total_ipv4_address_count: "{{ a_total_ipv4_address_count }}"
        zone: "{{ zone }}"
      register: subnet

    - name: Checking for existing VPC Subnet B
      ibm_is_subnet_info:
        name: "{{ subnet_name_b }}"
      failed_when:
        - subnet.rc != 0
        - '"No subnet found" not in subnet.stderr'
      register: subnet

    - name: Configure VPC Subnet B
      ibm_is_subnet:
        name: "{{ subnet_name_b }}"
        state: available
        id: "{{ subnet.id | default(omit) }}"
        vpc: "{{ vpc.resource.id }}"
        resource_group: "{{ resource_group_output.resource.id }}"
        total_ipv4_address_count: "{{ b_total_ipv4_address_count }}"
        zone: "{{ zone }}"
      register: subnet

    - name: Checking for existing VPC Subnet C
      ibm_is_subnet_info:
        name: "{{ subnet_name_c }}"
      failed_when:
        - subnet.rc != 0
        - '"No subnet found" not in subnet.stderr'
      register: subnet

    - name: Configure VPC Subnet C
      ibm_is_subnet:
        name: "{{ subnet_name_c }}"
        state: available
        id: "{{ subnet.id | default(omit) }}"
        vpc: "{{ vpc.resource.id }}"
        resource_group: "{{ resource_group_output.resource.id }}"
        total_ipv4_address_count: "{{ c_total_ipv4_address_count }}"
        zone: "{{ zone }}"
      register: subnet
